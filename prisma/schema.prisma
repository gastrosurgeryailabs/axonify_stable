generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  games         Game[]
  sessions      Session[]
  credentials   UserCredentials?
}

model Game {
  id                String     @id @default(cuid())
  userId            String
  timeStarted       DateTime
  topic             String
  timeEnded         DateTime?
  gameType          GameType
  completionMessage String?
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions         Question[]

  @@index([userId])
}

model topic_count {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}

model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  gameId            String
  options           Json?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      GameType
  userAnswer        String?
  explanation       String?
  game              Game     @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

model UserCredentials {
  id             String   @id @default(cuid())
  userId         String   @unique
  anythingLLMUrl String
  anythingLLMKey String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum GameType {
  mcq
  open_ended
}
